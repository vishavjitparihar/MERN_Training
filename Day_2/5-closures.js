/**
 * Closure:
 * 
 * A block that contains encapsulated references to the outside "lexical enviroment"
 * AKA an inner function that maintains references to an outer function
 * 
 * 
 */

//In JS, functions are "first class citizens"
//This means, I can treat functions like they are object because they are objects

//I can return functions or pass functions as arguments to the other functions
//I can also have a function nested within another function

function closure(name) {

    let localVar = 10 //this is a local variable, anything inside the function closure has access to iy

    function inner() {
        //This name variable is defined outside of this block, but i can still read it
        console.log(name);
        console.log(localVar);
    }

    inner();
}

closure('vishu');
//----------------------------------------------------------------------------------------------------------------------------



/**
 * Higher Order Functions or HOF:
 * 
 * It is a function that either takes a function as an argument/parameter or returns a function
 */



//example of a HOF with Closure
function greeter(name) {

    function greet() {
        console.log(`Hello ${name}`);
    }

    //?????????????????????????????????????????????????????????????????????????????????????????????????
    //need to ask Sean
    //how will return greet() change my function??
    //what will happen if I dont return greet, but just call greet()
   
    //lack of parenthesis indicates that I am returning the function and not it's return value 
    return greet;
}

// we will not use new keyword in this
// as new will create an object, but we are just using greeter to create another dynamic function 

// greetHeny is the pointer to the function 
const greetHenry = greeter('Henery');
greetHenry();

const greetMary = greeter('Mary');
greetMary();


//?????????????????????????????????????????????????????????????????????????????????????????????????
//why is it working tho?? -- need to ask Sean
//this is not a function, rather this is a 
const greetVishu = new greeter('vishu');
greetVishu();


//?????????????????????????????????????????????????????????????????????????????????????????????????
//how can i overcome printing undefined in console.log when passing another function as parameter
console.log(greetVishu());


//what will happen if i call greeter without any arguments
const greetNoName = greeter();
greetNoName();      // it will print Hello Undefined


//shortcut to create dynamic function
greeter('Naman')();   //this works same as const greetNaman = greeter('Naman)




//timesX example
function timesX (x) {

    //this function has no name
    return function(y){
        return x*y;
    }
}


const times5 = timesX(5);
console.log(times5(3)); //15
console.log(times5()); //NaN

//we can also access times function like this
console.log(timesX(10)(3)); //30




//passing a function to another function
function forX(x) {
    return function(action) {
        for(i=0; i<x; i++){
            console.log(action(i));
        }
    } 
}

const for10 = forX(10);

for10(function(i){
    console.log(`the present index is: ${i}`);
});


//?????????????????????????????????????????????????????????????????????????????????????????????????
//how can i print this value
console.log(for10((x) => {return times5(x)}));